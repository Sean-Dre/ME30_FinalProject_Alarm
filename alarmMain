import time
import random
from adafruit_circuitplayground import cp

cp.detect_taps = 2

hour = 0
minute = 0
x = 0
temp_hour = 0
temp_minute = 0

alarm_sec = 0
curr_time = 0

sec_day = 24*60*60
sec_hour = 60*60
sec_min = 60
cur_hour = 0
cur_min = 0
snooze_hour = 0
snooze_min = 0

task = 0
a = int(time.time())

def lightson(num):
    cp.pixels.brightness = 0.1
    if num <= 10:
        cp.pixels[num-1] = (255, 0, 0)
    elif num >= 11 and num <= 20:
        cp.pixels[num-11] = (255, 255, 0)
    elif num >= 21 and num <= 30:
        cp.pixels[num-21] = (0, 255, 0)
    elif num >= 31 and num <= 40:
        cp.pixels[num-31] = (0, 255, 255)
    elif num >= 41 and num <= 50:
        cp.pixels[num-41] = (255, 0, 127)
    elif num >= 51 and num <= 59:
        cp.pixels[num-51] = (255, 255, 255)

def lightsoff(num):
    cp.pixels.brightness = 0.1
    if num < 10:
        cp.pixels[num] = (0, 0, 0)
    elif num >= 10 and num <= 19:
        cp.pixels[num - 10] = (255, 0, 0)
    elif num >= 20 and num <= 29:
        cp.pixels[num - 20] = (255, 255, 0)
    elif num >= 30 and num <= 39:
        cp.pixels[num - 30] = (0, 255, 0)
    elif num >= 40 and num <= 49:
        cp.pixels[num - 40] = (0, 255, 255)
    elif num >= 50 and num <= 59:
        cp.pixels[num - 50] = (255, 0, 127)
    
def snooze(snooze_hour, snooze_min): #this is the snooze function. sets snooze to 5 min.
    if snooze_min+5 > 59:
        snooze_hour += 1
        snooze_min = (snooze_min+5)-60
    elif snooze_min+5 < 59:
        snooze_min+=5
    
    return snooze_hour, snooze_min

def getTask():
    quantity = random.randint(0, 9)
    color = random.randint(0, 3)
    if color == 0:
        return quantity, color, (255, 0, 0)
    if color == 1:
        return quantity, color, (0, 255, 0)
    if color == 2:
        return quantity, color, (0, 0, 255)
    if color == 3:
        return quantity, color, (255, 255, 0)

def setHourMin(cur_hour, temp_hour, num, x):
    if cp.tapped:
        cur_hour = temp_hour
        cp.pixels.fill((255,255,255))
        time.sleep(0.05)
        cp.pixels.fill((255,255,255))
        time.sleep(0.05)
        cp.pixels.fill((0,0,0))
        temp_hour = 0
        x+=1
        time.sleep(0.5)
    elif cp.button_a and not cp.button_b:
        temp_hour+=1
        lightson(temp_hour)
        time.sleep(0.3)
    elif cp.button_b and not cp.button_a:
        temp_hour-=1
        lightsoff(temp_hour)
        time.sleep(0.3)
    elif temp_hour > num or temp_hour < 0:
        temp_hour = 0
        cp.pixels.fill((0,0,0))
    return cur_hour, temp_hour, x
        
while True:
    while cp.switch == True:
        a = int(time.time())
        while x == 0:
            cur_hour, temp_hour, x = setHourMin(cur_hour, temp_hour, 24, x)
        while x == 1:
            cur_min, temp_minute, x = setHourMin(cur_min, temp_minute, 60, x)
        while x == 2:
            hour, temp_hour, x = setHourMin(hour, temp_hour, 24, x)
        while x == 3:
            minute, temp_minute, x = setHourMin(minute, temp_minute, 60, x)
        snooze_hour = hour
        snooze_min = minute
        time.sleep(3)
        print(cur_hour, cur_min)
        print(snooze_hour, snooze_min)
        x = 0
           
    while cp.switch == False: 
        cur_time = cur_hour*60*60 + cur_min*60 + (time.time() - a)
        up_min = (cur_time % sec_day) % sec_hour // sec_min
        up_hour = (cur_time % sec_day) // sec_hour

        cp.pixels.fill((0,0,0))

        if up_hour == 24:
            a += 86400

        #print(snooze_hour, snooze_min)
        #print(up_hour, up_min)
        time.sleep(2)
        
        while snooze_hour == up_hour and snooze_min == up_min:  #this is the alarm function
            cp.pixels.brightness = 1
            cp.play_tone(1000, 0.5)
            cp.pixels.fill((random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)))
            time.sleep(0.5)
            cp.play_tone(1000, 0.5)
            cp.pixels.fill((random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)))
            time.sleep(0.5)
            if cp.button_b and not cp.button_a:
                snooze_hour, snooze_min = snooze(snooze_hour, snooze_min)
            elif cp.button_a and not cp.button_b: 
                cp.pixels.fill((0,0,0))
                while task < 4:
                    quantity, color, RGB = getTask()
                    cp.pixels.fill((0,0,0))
    
                    if color == 0:
                        cp.pixels[quantity] = RGB
                        count = 0
                        while count != quantity+1:
                            if cp.button_a and not cp.button_b:
                                count+=1
                                time.sleep(0.2)
                            else:
                                task = task
                        task+=1
                    elif color == 1:
                        cp.pixels[quantity] = RGB
                        count = 0
                        while count != quantity+1:
                            if cp.button_b and not cp.button_a:
                                count+=1
                                time.sleep(0.2)
                            else:
                                task = task
                        task+=1
                    elif color == 2:
                        cp.pixels[quantity] = RGB
                        count = 0
                        while count != quantity+1:
                            if cp.tapped:
                                count+=1
                            else:
                                task = task
                        task+=1
                    elif color == 3:
                        cp.pixels[quantity] = RGB
                        count = 0
                        while count != quantity+1:
                            if cp.shake(shake_threshold = 30):
                                count+=1
                                
                            else:
                                task = task
                        task+=1
                    snooze_hour = hour
                    snooze_min = minute
